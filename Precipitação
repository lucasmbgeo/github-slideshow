{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Projeto I - Lucas e Gean - Entrega I",
      "provenance": [],
      "collapsed_sections": [
        "4soHbMBSzS8U",
        "5QQcoAZ0WVFy",
        "Vm9qdi_NrjgD",
        "rrLBjC4v-rBH",
        "2dH9hbSsqd3r",
        "RTQ9XCxkk9OI",
        "hh3C5ESfkhI4",
        "klPfS9nXknZ3",
        "f2CBfTRFkoUf",
        "I9zPPjrOlC3n",
        "_kDSRkNN-2-X"
      ],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/lucasmbgeo/github-slideshow/blob/master/Precipita%C3%A7%C3%A3o\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "VjboZeeVyvxl"
      },
      "source": [
        "#Classificação de Pinguins\n",
        "\n",
        "**Identificação**: \n",
        "\n",
        "> Gean Carlos Manfroi (2060697)\n",
        "\n",
        "> Lucas Marques Barros (2085293)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "4soHbMBSzS8U"
      },
      "source": [
        "# Entrega 1 : *Definição do Tema e a Especificação Técnica*\n",
        "\n",
        "---\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "5QQcoAZ0WVFy"
      },
      "source": [
        "### **Introdução**\n",
        "\n",
        "A variação intrapopulacional no nicho ecológico, é amplamente difundida na natureza, no entanto, as causas e consequências ecológicas e evolutivas de tal variabilidade individual permanecem mal compreendidas (GORMAN, 2014). A Bióloga Marinha Dra. Kristen Gorman (2014) trouxe a tona em um de seus estudos o conjunto de dados multivariados avaliado no presente trabalho, o qual buscava avaliar o dimorfismo intrapopulacional entre três espécies de pinguins habitantes do Arquipélago Palmer, localizado na Antártica. Com medições do cúlmen (parte superior do bico), nadadeiras, peso corporal e anotações sobre o sexo e espécie, o conjunto traz possíveis relações a serem avaliadas com algorítmos de machine learning, tal como no modelo da Íris de Fisher (FISHER,1936) .\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "### **Objetivo**\n",
        "\n",
        "Esse projeto tem como objetivo aplicar algoritmos de machine learning para a avaliação dos dimorfismos entre espécies e sexos dos pinguins habitantes do Arquipélago Palmer utilizando como base medições de suas dimensões físicas.\n",
        "\n",
        "\n",
        "### **Especificações Técnicas**\n",
        "\n",
        "> **Dataset**\n",
        "\n",
        "Para o desenvolvimento desse projeto foi utilizado o dataset\n",
        "denominado Palmer Archipelago (Antarctica) penguin data, elaborado pela Dra. Kristen Gorman (2014) disponível em: https://github.com/allisonhorst/palmerpenguins/blob/master/README.md.\n",
        "\n",
        ">**Formato**\n",
        "\n",
        "A base de dados está em formato CSV (*Comma Separated Values*), estando divivida em 7 colunas:\n",
        "* *Espécie*: Chinstrap, Adélie, ou Gentoo;\n",
        "* *Ilha*: Dream, Torgersen, ou Biscoe, ilhas do Arquipélago Palmer - Antártica;\n",
        "* *Comprimento do cúlmen* (mm); \n",
        "* *Espessura do cúlmen* (mm);\n",
        "* *Comprimento da nadadeira* (mm); \n",
        "* *Massa corporal* (g); \n",
        "* *Sexo*: Masculino ou Feminino;\n",
        "\n",
        "\n",
        ">**Métodos de Pré-processamento**\n",
        "\n",
        "Serão aplicados no projeto as técnicas de pré-processamento seguintes:\n",
        "* Limpeza da base, remoção de dados NaN.\n",
        "* Transformação dos atributos qualitativos (ilha e sexo) em dados numéricos.\n",
        "\n",
        ">**Tarefa de Aprendizado:** \n",
        "\n",
        "Será aplicado a tarefa de Classificação.\n",
        "\n",
        ">**Algoritmos Avaliados:** \n",
        "\n",
        "Serão avaliados os algoritmos KNN, Naive Bayes e Regressão Linear.\n",
        "\n",
        "\n",
        " \n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "mDwcqZ9hqXWM"
      },
      "source": [
        "# Entrega 2: *Preparação dos Dados*\n",
        "\n",
        "---\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Vm9qdi_NrjgD"
      },
      "source": [
        "### Conexão com o dataset"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "SKw1ciaWq7XZ"
      },
      "source": [
        "## Conexão com o dataset utilizado;\n",
        "## Exibição de trechos dos dados;\n",
        "# Explicar cada método de pré-processamento a ser utilizado;\n",
        "# Aplicar os métodos de pré-processamento selecionados;\n",
        "# Escolher uma maneira de particionar os dados:\n",
        "# Treino/Teste\n",
        "# Cross Validation \n",
        "# Aplicar ao menos um algoritmo de Machine Learning\n",
        "# Utilizar métricas de avaliação\n",
        "\n",
        "###############################################################################\n",
        "######################## IMPORTAÇÃO DAS BIBLIOTECAS\n",
        "\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "\n",
        "import seaborn as sns \n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "\n",
        "\n",
        "###############################################################################\n",
        "######################## CONEXÃO COM O DATASET UTILIZADO\n",
        "\n",
        "arquivo = 'https://raw.githubusercontent.com/lucasmbgeo/projeto1_uniasselvi/main/penguins_size.csv'\n",
        "dados = pd.read_csv(arquivo)\n",
        "data = np.array(dados)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "i6P3UMorRreX"
      },
      "source": [
        "### Exibição de trechos dos dados"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 204
        },
        "id": "uHGeGwClRmSn",
        "outputId": "b3a7cfda-1496-47a0-9110-b46d3f38d0c4"
      },
      "source": [
        "###############################################################################\n",
        "######################## EXIBIÇÃO DE TRECHO DOS DADOS\n",
        "\n",
        "dados.head()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>species</th>\n",
              "      <th>island</th>\n",
              "      <th>culmen_length_mm</th>\n",
              "      <th>culmen_depth_mm</th>\n",
              "      <th>flipper_length_mm</th>\n",
              "      <th>body_mass_g</th>\n",
              "      <th>sex</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Adelie</td>\n",
              "      <td>Torgersen</td>\n",
              "      <td>39.1</td>\n",
              "      <td>18.7</td>\n",
              "      <td>181.0</td>\n",
              "      <td>3750.0</td>\n",
              "      <td>MALE</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Adelie</td>\n",
              "      <td>Torgersen</td>\n",
              "      <td>39.5</td>\n",
              "      <td>17.4</td>\n",
              "      <td>186.0</td>\n",
              "      <td>3800.0</td>\n",
              "      <td>FEMALE</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Adelie</td>\n",
              "      <td>Torgersen</td>\n",
              "      <td>40.3</td>\n",
              "      <td>18.0</td>\n",
              "      <td>195.0</td>\n",
              "      <td>3250.0</td>\n",
              "      <td>FEMALE</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Adelie</td>\n",
              "      <td>Torgersen</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Adelie</td>\n",
              "      <td>Torgersen</td>\n",
              "      <td>36.7</td>\n",
              "      <td>19.3</td>\n",
              "      <td>193.0</td>\n",
              "      <td>3450.0</td>\n",
              "      <td>FEMALE</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "  species     island  culmen_length_mm  ...  flipper_length_mm  body_mass_g     sex\n",
              "0  Adelie  Torgersen              39.1  ...              181.0       3750.0    MALE\n",
              "1  Adelie  Torgersen              39.5  ...              186.0       3800.0  FEMALE\n",
              "2  Adelie  Torgersen              40.3  ...              195.0       3250.0  FEMALE\n",
              "3  Adelie  Torgersen               NaN  ...                NaN          NaN     NaN\n",
              "4  Adelie  Torgersen              36.7  ...              193.0       3450.0  FEMALE\n",
              "\n",
              "[5 rows x 7 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 251
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "1KC02JoPtkRy",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 173
        },
        "outputId": "6b887c72-23ee-474e-a5ce-04edfe1b6c24"
      },
      "source": [
        "###############################################################################\n",
        "######################## CORRELAÇÃO ENTRE OS ATRIBUTOS NUMÉRICOS\n",
        "\n",
        "dados.corr()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>culmen_length_mm</th>\n",
              "      <th>culmen_depth_mm</th>\n",
              "      <th>flipper_length_mm</th>\n",
              "      <th>body_mass_g</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>culmen_length_mm</th>\n",
              "      <td>1.000000</td>\n",
              "      <td>-0.235053</td>\n",
              "      <td>0.656181</td>\n",
              "      <td>0.595110</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>culmen_depth_mm</th>\n",
              "      <td>-0.235053</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>-0.583851</td>\n",
              "      <td>-0.471916</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>flipper_length_mm</th>\n",
              "      <td>0.656181</td>\n",
              "      <td>-0.583851</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.871202</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>body_mass_g</th>\n",
              "      <td>0.595110</td>\n",
              "      <td>-0.471916</td>\n",
              "      <td>0.871202</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "                   culmen_length_mm  ...  body_mass_g\n",
              "culmen_length_mm           1.000000  ...     0.595110\n",
              "culmen_depth_mm           -0.235053  ...    -0.471916\n",
              "flipper_length_mm          0.656181  ...     0.871202\n",
              "body_mass_g                0.595110  ...     1.000000\n",
              "\n",
              "[4 rows x 4 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 252
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "pzEkYWhBzlyx",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 173
        },
        "outputId": "af132317-c696-436e-b95c-8095680302e8"
      },
      "source": [
        "###############################################################################\n",
        "######################## COVARIÂNCIA ENTRE OS ATRIBUTOS NUMÉRICOS\n",
        "\n",
        "dados.cov()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>culmen_length_mm</th>\n",
              "      <th>culmen_depth_mm</th>\n",
              "      <th>flipper_length_mm</th>\n",
              "      <th>body_mass_g</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>culmen_length_mm</th>\n",
              "      <td>29.807054</td>\n",
              "      <td>-2.534234</td>\n",
              "      <td>50.375765</td>\n",
              "      <td>2605.591912</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>culmen_depth_mm</th>\n",
              "      <td>-2.534234</td>\n",
              "      <td>3.899808</td>\n",
              "      <td>-16.212950</td>\n",
              "      <td>-747.370093</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>flipper_length_mm</th>\n",
              "      <td>50.375765</td>\n",
              "      <td>-16.212950</td>\n",
              "      <td>197.731792</td>\n",
              "      <td>9824.416062</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>body_mass_g</th>\n",
              "      <td>2605.591912</td>\n",
              "      <td>-747.370093</td>\n",
              "      <td>9824.416062</td>\n",
              "      <td>643131.077327</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "                   culmen_length_mm  ...    body_mass_g\n",
              "culmen_length_mm          29.807054  ...    2605.591912\n",
              "culmen_depth_mm           -2.534234  ...    -747.370093\n",
              "flipper_length_mm         50.375765  ...    9824.416062\n",
              "body_mass_g             2605.591912  ...  643131.077327\n",
              "\n",
              "[4 rows x 4 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 253
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 324
        },
        "id": "Y-KqEHKL7hDW",
        "outputId": "bd1f06b1-0f78-4fee-fd01-e995561cdc23"
      },
      "source": [
        "###############################################################################\n",
        "######################## REGISTROS POR ESPÉCIE E SEXO\n",
        "\n",
        "graf2 = sns.countplot(x=dados['species'],hue=dados['sex'])\n",
        "graf2.set_title(\"Quantidade de Registros por Espécie e Sexo\", fontsize = 18, pad=10)\n",
        "graf2.set_xlabel(\"Espécies de Pinguins\", fontsize = 12)\n",
        "graf2.set_ylabel(\"Quantidade\", fontsize = 12)\n",
        "graf2.legend(title=\"Sexo\")"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.legend.Legend at 0x7fb9bb25f350>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 254
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 324
        },
        "id": "gJoO8be071Sy",
        "outputId": "9ed2f076-c437-4b42-9c33-a9b9f6f726cd"
      },
      "source": [
        "###############################################################################\n",
        "######################## REGISTROS POR ESPÉCIE E SEXO\n",
        "graf3 = sns.scatterplot(x='culmen_length_mm', y='culmen_depth_mm',data=dados,hue='species')\n",
        "graf3.set_title(\"Relação Comprimento x Espessura do Cúlmen por Espécie\", fontsize = 18, pad=10)\n",
        "graf3.set_xlabel(\"Comprimento do Cúlmen\", fontsize = 12)\n",
        "graf3.set_ylabel(\"Espessura do Cúlmen\", fontsize = 12)\n",
        "graf3.legend(title=\"Espécie\")"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.legend.Legend at 0x7fb9baf81390>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 255
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "rrLBjC4v-rBH"
      },
      "source": [
        "### Pré-processamento"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "nwaAJcUXWVUu"
      },
      "source": [
        "> Conversão dos Valores Qualitativos"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "IN6UBFUt8EnR",
        "outputId": "a7189373-784f-47b9-9b2f-882141d9c480"
      },
      "source": [
        "###############################################################################\n",
        "######################## CONVERSÃO DOS VALORES CATEGÓRICOS PARA NUMÉRICOS\n",
        "\n",
        "dados = pd.get_dummies(dados, columns=['sex','island'])\n",
        "dados.head()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>species</th>\n",
              "      <th>culmen_length_mm</th>\n",
              "      <th>culmen_depth_mm</th>\n",
              "      <th>flipper_length_mm</th>\n",
              "      <th>body_mass_g</th>\n",
              "      <th>sex_.</th>\n",
              "      <th>sex_FEMALE</th>\n",
              "      <th>sex_MALE</th>\n",
              "      <th>island_Biscoe</th>\n",
              "      <th>island_Dream</th>\n",
              "      <th>island_Torgersen</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Adelie</td>\n",
              "      <td>39.1</td>\n",
              "      <td>18.7</td>\n",
              "      <td>181.0</td>\n",
              "      <td>3750.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Adelie</td>\n",
              "      <td>39.5</td>\n",
              "      <td>17.4</td>\n",
              "      <td>186.0</td>\n",
              "      <td>3800.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Adelie</td>\n",
              "      <td>40.3</td>\n",
              "      <td>18.0</td>\n",
              "      <td>195.0</td>\n",
              "      <td>3250.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Adelie</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Adelie</td>\n",
              "      <td>36.7</td>\n",
              "      <td>19.3</td>\n",
              "      <td>193.0</td>\n",
              "      <td>3450.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "  species  culmen_length_mm  ...  island_Dream  island_Torgersen\n",
              "0  Adelie              39.1  ...             0                 1\n",
              "1  Adelie              39.5  ...             0                 1\n",
              "2  Adelie              40.3  ...             0                 1\n",
              "3  Adelie               NaN  ...             0                 1\n",
              "4  Adelie              36.7  ...             0                 1\n",
              "\n",
              "[5 rows x 11 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 256
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "755yrhZiWx_X"
      },
      "source": [
        "> Encontrando/Preenchendo Valores Faltantes"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "M8XjMcVY8pzo",
        "outputId": "1867c22c-6051-420f-bbb2-a5349f4788bc"
      },
      "source": [
        "###############################################################################\n",
        "######################## UTILIZANDO UM HEATMAP PARA DESCOBRIR VALORES FALTANTES\n",
        "\n",
        "sns.heatmap(dados.isnull())\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7fb9bafa1810>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 257
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 2 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "X2kxEocf8QQT",
        "outputId": "b681f485-5bef-422c-a34f-6cdcffff33c2"
      },
      "source": [
        "###############################################################################\n",
        "######################## PREENCHENDO OS DADOS FALTANTES COM ZEROS\n",
        "######################## E REPETINDO O HEATMAP\n",
        "\n",
        "dados = dados.fillna(0)\n",
        "\n",
        "sns.heatmap(dados.isnull())"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7fb9bae9b510>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 258
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 2 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "D9W6P3zMXb9u"
      },
      "source": [
        "### Padronização do Dataset"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "f14e8lHF9DAv",
        "outputId": "a5fa40c5-36ea-4b8a-edc4-235870e99390"
      },
      "source": [
        "from sklearn.preprocessing import StandardScaler\n",
        "\n",
        "X = dados.drop(['species'],axis=1)\n",
        "y = dados['species']\n",
        "Nomes = dados.columns[1:]\n",
        "\n",
        "scale = StandardScaler()\n",
        "scale.fit(X)\n",
        "transformado = scale.transform(X)\n",
        "X = pd.DataFrame( transformado, columns=Nomes)\n",
        "\n",
        "X.info()\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 344 entries, 0 to 343\n",
            "Data columns (total 10 columns):\n",
            " #   Column             Non-Null Count  Dtype  \n",
            "---  ------             --------------  -----  \n",
            " 0   culmen_length_mm   344 non-null    float64\n",
            " 1   culmen_depth_mm    344 non-null    float64\n",
            " 2   flipper_length_mm  344 non-null    float64\n",
            " 3   body_mass_g        344 non-null    float64\n",
            " 4   sex_.              344 non-null    float64\n",
            " 5   sex_FEMALE         344 non-null    float64\n",
            " 6   sex_MALE           344 non-null    float64\n",
            " 7   island_Biscoe      344 non-null    float64\n",
            " 8   island_Dream       344 non-null    float64\n",
            " 9   island_Torgersen   344 non-null    float64\n",
            "dtypes: float64(10)\n",
            "memory usage: 27.0 KB\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "qY6dHchYcA3E"
      },
      "source": [
        "### Separação Treino/Teste com 30% para Teste"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "CyOgmVxO9cTg"
      },
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "\n",
        "x_train,x_test,y_train,y_test = train_test_split(X,y,test_size=0.3,random_state=101)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "XG6q53vQceC1"
      },
      "source": [
        "### Implementando o Algoritmo de KNN"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "SStxDgUM9rTn"
      },
      "source": [
        "from sklearn.neighbors import KNeighborsClassifier\n",
        "\n",
        "n_vizinhos=10\n",
        "\n",
        "knn = KNeighborsClassifier(n_vizinhos)\n",
        "\n",
        "knn.fit(x_train,y_train)\n",
        "\n",
        "saida1 = knn.predict(x_test)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "U60q_vU-9r3P",
        "outputId": "f2ed623f-3975-41e8-a6ea-4bdd3e793b64"
      },
      "source": [
        "from sklearn.metrics import classification_report,confusion_matrix\n",
        "\n",
        "print(classification_report(y_test,saida1))\n",
        "print(confusion_matrix(y_test,saida1))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "      Adelie       1.00      1.00      1.00        41\n",
            "   Chinstrap       1.00      1.00      1.00        26\n",
            "      Gentoo       1.00      1.00      1.00        37\n",
            "\n",
            "    accuracy                           1.00       104\n",
            "   macro avg       1.00      1.00      1.00       104\n",
            "weighted avg       1.00      1.00      1.00       104\n",
            "\n",
            "[[41  0  0]\n",
            " [ 0 26  0]\n",
            " [ 0  0 37]]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "2dH9hbSsqd3r"
      },
      "source": [
        "# Entrega 3: *Avaliação dos Métodos de Aprendizado de Máquina e Predição*\n",
        "\n",
        "---\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "RTQ9XCxkk9OI"
      },
      "source": [
        "##Aplicações"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "hh3C5ESfkhI4"
      },
      "source": [
        "### Algoritmo 1: KNN\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "-5x_vW7czb5M",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "3fa77209-0161-4338-a7b7-c84add99c53f"
      },
      "source": [
        "#Importa a biblioteca KNN\n",
        "from sklearn.neighbors import KNeighborsClassifier\n",
        "\n",
        "#Definindo o número de vizinhos.\n",
        "knn = KNeighborsClassifier(n_neighbors=3)\n",
        "\n",
        "#Aplicando os dados de treino ao algoritmo\n",
        "knn.fit(x_train, y_train)\n",
        "\n",
        "#Executando KNN no conjunto de teste\n",
        "resultado_knn = knn.predict(x_test)\n",
        "resultado_knn\n",
        "\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array(['Adelie', 'Gentoo', 'Adelie', 'Adelie', 'Gentoo', 'Chinstrap',\n",
              "       'Chinstrap', 'Chinstrap', 'Chinstrap', 'Gentoo', 'Gentoo',\n",
              "       'Adelie', 'Adelie', 'Gentoo', 'Adelie', 'Adelie', 'Chinstrap',\n",
              "       'Chinstrap', 'Adelie', 'Chinstrap', 'Chinstrap', 'Adelie',\n",
              "       'Adelie', 'Adelie', 'Adelie', 'Chinstrap', 'Gentoo', 'Adelie',\n",
              "       'Gentoo', 'Adelie', 'Adelie', 'Adelie', 'Chinstrap', 'Gentoo',\n",
              "       'Gentoo', 'Gentoo', 'Chinstrap', 'Adelie', 'Adelie', 'Adelie',\n",
              "       'Adelie', 'Adelie', 'Gentoo', 'Adelie', 'Adelie', 'Adelie',\n",
              "       'Gentoo', 'Chinstrap', 'Adelie', 'Gentoo', 'Chinstrap', 'Gentoo',\n",
              "       'Gentoo', 'Adelie', 'Adelie', 'Chinstrap', 'Gentoo', 'Adelie',\n",
              "       'Chinstrap', 'Adelie', 'Adelie', 'Gentoo', 'Chinstrap', 'Adelie',\n",
              "       'Chinstrap', 'Gentoo', 'Gentoo', 'Gentoo', 'Gentoo', 'Gentoo',\n",
              "       'Adelie', 'Adelie', 'Gentoo', 'Chinstrap', 'Adelie', 'Gentoo',\n",
              "       'Gentoo', 'Gentoo', 'Gentoo', 'Chinstrap', 'Chinstrap', 'Gentoo',\n",
              "       'Adelie', 'Adelie', 'Chinstrap', 'Adelie', 'Gentoo', 'Gentoo',\n",
              "       'Gentoo', 'Chinstrap', 'Gentoo', 'Gentoo', 'Gentoo', 'Gentoo',\n",
              "       'Gentoo', 'Adelie', 'Adelie', 'Gentoo', 'Adelie', 'Chinstrap',\n",
              "       'Adelie', 'Chinstrap', 'Chinstrap', 'Chinstrap'], dtype=object)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 263
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "9aLlsppuhsvq",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "bf55f814-1434-4c07-808e-3ee868e7d915"
      },
      "source": [
        "#Matriz de Confusão\n",
        "print (pd.crosstab(y_test,resultado_knn, rownames=['Real'], colnames=['Predito ------>'], margins=True))\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Predito ------>  Adelie  Chinstrap  Gentoo  All\n",
            "Real                                           \n",
            "Adelie               41          0       0   41\n",
            "Chinstrap             0         26       0   26\n",
            "Gentoo                0          0      37   37\n",
            "All                  41         26      37  104\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "YkT45qH-ht1b"
      },
      "source": [
        "A matriz de confusão serve para mostrar as frequências classificação para cada classe do modelo."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "e5mByRgBiInt",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "2678cd11-a2cd-4cdd-d942-be21251b8310"
      },
      "source": [
        "#Métrica de Classificação\n",
        "from sklearn import metrics\n",
        "print(metrics.classification_report(y_test,resultado_knn,target_names=set(y)))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "   Chinstrap       1.00      1.00      1.00        41\n",
            "      Adelie       1.00      1.00      1.00        26\n",
            "      Gentoo       1.00      1.00      1.00        37\n",
            "\n",
            "    accuracy                           1.00       104\n",
            "   macro avg       1.00      1.00      1.00       104\n",
            "weighted avg       1.00      1.00      1.00       104\n",
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "bBVAxrZEiX1E"
      },
      "source": [
        "Esta tabela nos tras informações uteis, como por exemplo, quanto o modelo acertou das previsões possíveis.\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "3vN-OSiPitWs"
      },
      "source": [
        "Agora vamos otimizar o parâmetro K com GridSeach:\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "--UqXm7_ihBz",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "6db6dbd7-40b0-464a-cd22-42ef976b1ef0"
      },
      "source": [
        "#Importando a biblioteca\n",
        "from sklearn.model_selection import GridSearchCV\n",
        "\n",
        "#Definindo a lista de valores. Neste caso vamos gerar uma lista de 1 a 30 para testar qual será o melhor valor para o parâmetro K.\n",
        "k_list = list(range(1,31))\n",
        "\n",
        "\n",
        "#Colocamos os valores em um dicionário\n",
        "parametros = dict(n_neighbors=k_list)\n",
        "\n",
        "#Instanciamos o objeto GridSearch, utilizamos neste caso a lista com os valores para os numeros de vizinhos e o scoring, \n",
        "#métrica de avaliação dos modelos de classificação\n",
        "grid = GridSearchCV(knn, parametros, cv=5, scoring='accuracy')\n",
        "\n",
        "#Treinando o parâmetro\n",
        "grid.fit(X,y)\n",
        "scores = grid.cv_results_.get('mean_test_score')\n",
        "#Visualizando os melhores parâmetros com os valores de acurácia\n",
        "print(\"Melhores parametros {} com o valor de acurácia {} \".format(grid.best_params_,grid.best_score_))\n",
        "\n",
        "print(grid.scoring)\n",
        "\n",
        "#Visualização de forma gráfica\n",
        "plt.figure(figsize=(10,6))\n",
        "plt.plot(k_list,scores,color='red',linestyle='dashed',marker='o')"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Melhores parametros {'n_neighbors': 6} com o valor de acurácia 0.994160272804774 \n",
            "accuracy\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[<matplotlib.lines.Line2D at 0x7fb9bad8c990>]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 266
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 720x432 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "klPfS9nXknZ3"
      },
      "source": [
        "### Algoritmo 2: Naive Bayes"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "zbN_XjVrgnaN",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "dd53d198-0efb-4f4b-b40c-cf46416b49ae"
      },
      "source": [
        "#Importa a biblioteca do modelo Naive Bayes Gaussiano\n",
        "from sklearn.naive_bayes import GaussianNB\n",
        "import numpy as np\n",
        "\n",
        "#Cria um classificador Gaussiano\n",
        "model = GaussianNB()\n",
        "\n",
        "#Treina o modelo usando os dados de treino \n",
        "model.fit(x_train,y_train)\n",
        "\n",
        "#Resultado de previsão \n",
        "resultado_NB = model.predict(x_test)\n",
        "\n",
        "#Matriz de Confusão\n",
        "print(\"Naive Bayes\\n\",pd.crosstab(y_test,resultado_NB, rownames=['Real'], colnames=['Predito ------>'], margins=True))\n",
        "\n",
        "print(\"\\n\\nKNN\\n\",pd.crosstab(y_test,resultado_knn, rownames=['Real'], colnames=['Predito ------>'], margins=True))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Naive Bayes\n",
            " Predito ------>  Adelie  Chinstrap  Gentoo  All\n",
            "Real                                           \n",
            "Adelie               17         18       6   41\n",
            "Chinstrap             0         26       0   26\n",
            "Gentoo                0          0      37   37\n",
            "All                  17         44      43  104\n",
            "\n",
            "\n",
            "KNN\n",
            " Predito ------>  Adelie  Chinstrap  Gentoo  All\n",
            "Real                                           \n",
            "Adelie               41          0       0   41\n",
            "Chinstrap             0         26       0   26\n",
            "Gentoo                0          0      37   37\n",
            "All                  41         26      37  104\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "f2CBfTRFkoUf"
      },
      "source": [
        "### Algoritmo 3: Regressão Linear"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "QJMra3SzGit6",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "d3ec6d5a-a6e4-4ea1-cba1-8d31e2f51f77"
      },
      "source": [
        "\n",
        "from sklearn.linear_model import LinearRegression\n",
        "\n",
        "# Instanciando o modelo: \n",
        "y_train2 = y_train.replace({'Adelie':0,'Chinstrap':1,'Gentoo':2}) \n",
        "y_test2 = y_test.replace({'Adelie':0,'Chinstrap':1,'Gentoo':2}) \n",
        "\n",
        "lin_model = LinearRegression()\n",
        "lin_model.fit(x_train, y_train2)\n",
        "\n",
        "# Testando o modelo:\n",
        "y_test_predicoes = lin_model.predict(x_test)\n",
        "\n",
        "# Avaliando o modelo com mse:\n",
        "from sklearn.metrics import mean_squared_error\n",
        "mse = mean_squared_error(y_test2, y_test_predicoes)\n",
        "print('MSE: {}'.format(mse))\n",
        "\n",
        "# Avaliando o modelo com rmse:\n",
        "rmse = (np.sqrt(mean_squared_error(y_test2, y_test_predicoes)))\n",
        "print('RMSE: {}'.format(rmse))\n",
        "print(y_test2)\n",
        "\n",
        "\n",
        "y_test_predicoes.round(decimals=0)\n",
        "resultado_LR = y_test.replace({0:'Adelie',1:'Chinstrap',2:'Gentoo'})"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "MSE: 0.0758364217379519\n",
            "RMSE: 0.27538413486973407\n",
            "143    0\n",
            "277    2\n",
            "134    0\n",
            "64     0\n",
            "333    2\n",
            "      ..\n",
            "171    1\n",
            "78     0\n",
            "165    1\n",
            "189    1\n",
            "162    1\n",
            "Name: species, Length: 104, dtype: int64\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "teZRwAlFHXNj"
      },
      "source": [
        "Quando menor o MSE (média de erro ao quadrado), mais o modelo irá se aproximar do acerto, na regressão o objetivo é diminuir essa média, nos fornecendo assim a melhor linha que passa por todos os pontos."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "yebJSmpQIqi6"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "tTVcmRtLIw1R"
      },
      "source": [
        "*O* RMSE é a raiz quadrada do MSE."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "I9zPPjrOlC3n"
      },
      "source": [
        "## Considerações Finais\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "8saOlZteHV2p"
      },
      "source": [
        ""
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "QUltsLS18rsr",
        "outputId": "ca307ba7-a881-464c-cd77-c397ca5f187c"
      },
      "source": [
        "#Matriz de Confusão\n",
        "\n",
        "print(\"#############################################\")\n",
        "print(\"\\n Matrizes de Confusão \\n\\n\")\n",
        "print(\"KNN\\n\",pd.crosstab(y_test,resultado_knn, rownames=['Real'], colnames=['Predito ------>'], margins=True))\n",
        "print(\"\\n\\nNaive Bayes\\n\",pd.crosstab(y_test,resultado_NB, rownames=['Real'], colnames=['Predito ------>'], margins=True))\n",
        "print(\"\\n\\nLinear Regression\\n\",pd.crosstab(y_test,resultado_LR, rownames=['Real'], colnames=['Predito ------>'], margins=True))\n",
        "\n",
        "#Metrics\n",
        "\n",
        "print(\"\\n\\n#############################################\")\n",
        "print(\"\\n Métricas \\n\\n\")\n",
        "\n",
        "from sklearn import metrics\n",
        "print(\"KNN\\n\",metrics.classification_report(y_test,resultado_knn,target_names=set(y)))\n",
        "print(\"\\n\\nNaive Bayes\\n\",metrics.classification_report(y_test,resultado_NB,target_names=set(y)))\n",
        "print(\"\\n\\nLinear Regression\\n\",metrics.classification_report(y_test,resultado_LR,target_names=set(y)))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "#############################################\n",
            "\n",
            " Matrizes de Confusão \n",
            "\n",
            "\n",
            "KNN\n",
            " Predito ------>  Adelie  Chinstrap  Gentoo  All\n",
            "Real                                           \n",
            "Adelie               41          0       0   41\n",
            "Chinstrap             0         26       0   26\n",
            "Gentoo                0          0      37   37\n",
            "All                  41         26      37  104\n",
            "\n",
            "\n",
            "Naive Bayes\n",
            " Predito ------>  Adelie  Chinstrap  Gentoo  All\n",
            "Real                                           \n",
            "Adelie               17         18       6   41\n",
            "Chinstrap             0         26       0   26\n",
            "Gentoo                0          0      37   37\n",
            "All                  17         44      43  104\n",
            "\n",
            "\n",
            "Linear Regression\n",
            " Predito ------>  Adelie  Chinstrap  Gentoo  All\n",
            "Real                                           \n",
            "Adelie               41          0       0   41\n",
            "Chinstrap             0         26       0   26\n",
            "Gentoo                0          0      37   37\n",
            "All                  41         26      37  104\n",
            "\n",
            "\n",
            "#############################################\n",
            "\n",
            " Métricas \n",
            "\n",
            "\n",
            "KNN\n",
            "               precision    recall  f1-score   support\n",
            "\n",
            "   Chinstrap       1.00      1.00      1.00        41\n",
            "      Adelie       1.00      1.00      1.00        26\n",
            "      Gentoo       1.00      1.00      1.00        37\n",
            "\n",
            "    accuracy                           1.00       104\n",
            "   macro avg       1.00      1.00      1.00       104\n",
            "weighted avg       1.00      1.00      1.00       104\n",
            "\n",
            "\n",
            "\n",
            "Naive Bayes\n",
            "               precision    recall  f1-score   support\n",
            "\n",
            "   Chinstrap       1.00      0.41      0.59        41\n",
            "      Adelie       0.59      1.00      0.74        26\n",
            "      Gentoo       0.86      1.00      0.92        37\n",
            "\n",
            "    accuracy                           0.77       104\n",
            "   macro avg       0.82      0.80      0.75       104\n",
            "weighted avg       0.85      0.77      0.75       104\n",
            "\n",
            "\n",
            "\n",
            "Linear Regression\n",
            "               precision    recall  f1-score   support\n",
            "\n",
            "   Chinstrap       1.00      1.00      1.00        41\n",
            "      Adelie       1.00      1.00      1.00        26\n",
            "      Gentoo       1.00      1.00      1.00        37\n",
            "\n",
            "    accuracy                           1.00       104\n",
            "   macro avg       1.00      1.00      1.00       104\n",
            "weighted avg       1.00      1.00      1.00       104\n",
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "_kDSRkNN-2-X"
      },
      "source": [
        "# Referências Bibliográficas\n",
        "\n",
        "\n",
        "---\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "9BEnp06jyhus"
      },
      "source": [
        "1. Horst AM, Hill AP, Gorman KB (2020). palmerpenguins: Palmer Archipelago (Antarctica) penguin data. R package version 0.1.0. https://allisonhorst.github.io/palmerpenguins/. doi: 10.5281/zenodo.3960218.\n",
        "\n",
        "2. Gorman KB, Williams TD, Fraser WR (2014). Ecological sexual dimorphism and environmental variability within a community of Antarctic penguins (genus Pygoscelis). PLoS ONE 9(3):e90081. \n",
        "https://doi.org/10.1371/journal.pone.0090081.\n",
        "\n",
        "3. Fisher RA (1936).The use of multiple measurements in taxonomic problems. Annals of Eugenics. 7: 179–188.\n",
        "https://dx.doi.org/10.1111%2Fj.1469-1809.1936.tb02137.x\n",
        "4. "
      ]
    }
  ]
}